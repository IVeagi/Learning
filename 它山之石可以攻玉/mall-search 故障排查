背景：mall-search服务发生OOM后重启，但是重启后的pod长时间无流量接入，时间不固定
环境：QA环境 ，mall-search（两个pod），mall-rest（1个pod）
工具:  python脚本:向mall-search注入流量
import requests

def print_hi(name):
    # 通过url直接加上请求参数，与通过params传参效果是一样的
    header = {
        "Content-Type": "application/json",
        "Accept-Charset": "utf-8",
        "app-id": "10",
        "system-source": "ios",
        "token": "48QYvAsWnj3QC3L4gBJJ6f4fgx9n72jahekyhynkWUFB02Sr5xjV90XUXrB1u8RA"
    }
    i=0
    while i < 1000:
        urlString= 'http://cdn-qa.doublefs.com/mall-rest/api/v1/product-list/all-products%d' % i
        response2 = requests.get(url=urlString, headers=header)

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')
       arthas 查看入参出参，com.ecwid.consul.v1.health.HealthConsulClient getHealthServices
       web url 查看consul注册信息：http://consul-cluster.qa.doublefs.com:8500/v1/health/service/mall-search-service?tag=env-qa&passing=true&token= 
步骤：
1. 在qa环境两个mall-search 的pod  保证服务正常，且有流量接入（根据日志） web url 检测到两个pod
mall-search-6c4d86fdb-5c7mv （pod1）   mall-search-6c4d86fdb-ktvmm （pod2）
2.  在mall-rest 上开启arthas  监听consul相关入参出参
  其中common-server 和 mall-cms-service 每3秒刷新一次
 mall-search-service 不一定 4s-10m都有（只统计观测周期内，不代表完整数据）
3. arthas监听mall-search服务
watch com.ecwid.consul.v1.health.HealthConsulClient getHealthServices | grep -B 4 mall-search-6c4d86fdb
4. 在pod1 的 java容器内 kill 1 （模拟容器OOM）和 thanos-mesh注入OOM故障
 容器内日志
2023-11-15 08:22:39.532 [] [SpringContextShutdownHook] INFO  n.d.b.g.server.serverfactory.GrpcServerLifecycle - Completed gRPC server shutdown
2023-11-15 08:22:39.537 [] [SpringContextShutdownHook] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests tocomplete
2023-11-15 08:22:39.540 [] [tomcat-shutdown] INFO  o.s.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2023-11-15 08:22:39.568 [] [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskScheduler - Shutting down ExecutorService 'catalogWatchTaskScheduler'
2023-11-15 08:22:41.621 [] [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-11-15 08:22:41.634 [] [SpringContextShutdownHook] INFO  o.s.scheduling.concurrent.ThreadPoolTaskExecutor - Shutting down ExecutorService 'commonThread'
2023-11-15 08:22:41.787 [] [SpringContextShutdownHook] INFO  o.s.c.consul.serviceregistry.ConsulServiceRegistry - Deregistering servicewith consul: mall-search-service-8108
2023-11-15 08:22:41.831 [] [SpringContextShutdownHook] INFO  c.b.dynamic.datasource.DynamicRoutingDataSource - dynamic-datasource startclosing ....
2023-11-15 08:22:41.831 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_product_read - Shutdown initiated...
2023-11-15 08:22:41.837 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_product_read - Shutdown completed.
2023-11-15 08:22:41.837 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - shophub - Shutdown initiated...
2023-11-15 08:22:41.839 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - shophub - Shutdown completed.
2023-11-15 08:22:41.839 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_marketing_read - Shutdown initiated...
2023-11-15 08:22:41.846 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_marketing_read - Shutdown completed.
2023-11-15 08:22:41.846 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_search - Shutdown initiated...
2023-11-15 08:22:41.850 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_search - Shutdown completed.
2023-11-15 08:22:41.850 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_search_read - Shutdown initiated...
2023-11-15 08:22:41.854 [] [SpringContextShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - mall_search_read - Shutdown completed.
2023-11-15 08:22:41.855 [] [SpringContextShutdownHook] INFO  c.b.dynamic.datasource.DynamicRoutingDataSource - dynamic-datasource all closed success,bye
   consul web上显示立刻下线 ，同时arthas上自动刷新mall-search信息5次后 (前两次两个节点 后三次一个节点)  response只剩下一个节点pod2  
ts=2023-11-15 07:18:50; [cost=3.284347ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='43b819b9-e1c3-ce11-6f2a-8a67de143b5b', node='mall-search-6c4d86fdb-5c7mv', address='172.16.19.10', datacenter='qa', taggedAddresses={lan=172.16.19.10, lan_ipv4=172.16.19.10, wan=172.16.19.10, wan_ipv4=172.16.19.10}, meta={consul-network-segment=}, createIndex=25658127, modifyIndex=25658128}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.19.10', meta={}, port=8108, enableTagOverride=false, createIndex=25673219, modifyIndex=25673219}, checks=[Check{node='mall-search-6c4d86fdb-5c7mv', checkId='serfHealth', name='SerfHealth Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25658127, modifyIndex=25658127}, Check{node='mall-search-6c4d86fdb-5c7mv', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25673219, modifyIndex=25673220}]}, HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196',meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674076, consulKnownLeader=true, consulLastContact=0}],
ts=2023-11-15 07:18:51; [cost=2.951051ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='43b819b9-e1c3-ce11-6f2a-8a67de143b5b', node='mall-search-6c4d86fdb-5c7mv', address='172.16.19.10', datacenter='qa', taggedAddresses={lan=172.16.19.10, lan_ipv4=172.16.19.10, wan=172.16.19.10, wan_ipv4=172.16.19.10}, meta={consul-network-segment=}, createIndex=25658127, modifyIndex=25658128}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.19.10', meta={}, port=8108, enableTagOverride=false, createIndex=25673219, modifyIndex=25673219}, checks=[Check{node='mall-search-6c4d86fdb-5c7mv', checkId='serfHealth', name='SerfHealth Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25658127, modifyIndex=25658127}, Check{node='mall-search-6c4d86fdb-5c7mv', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25673219, modifyIndex=25673220}]}, HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196',meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674076, consulKnownLeader=true, consulLastContact=0}],
ts=2023-11-15 07:18:53; [cost=2.693187ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196', meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674160, consulKnownLeader=true, consulLastContact=0}],
ts=2023-11-15 07:18:53; [cost=9.20143ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196', meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674160, consulKnownLeader=true, consulLastContact=0}],
ts=2023-11-15 07:18:56; [cost=3.616353ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196', meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674160, consulKnownLeader=true, consulLastContact=0}],
5. 然后等待一段时间，容器重启上线，consul上可以观测到两个节点，web url检测到两个节点，此时arthas上刷新一次mall-search 但是只有一个节点pod2 ，此时 观测到pod1无流量接入
ts=2023-11-15 07:20:22; [cost=5.195321ms] result=@ArrayList[
    @Object[][isEmpty=false;size=2],
    @HealthConsulClient[com.ecwid.consul.v1.health.HealthConsulClient@165ec921],
    @Response[Response{value=[HealthService{node=Node{id='30db20b2-733a-bd1f-f158-c4e150d3ab1c', node='mall-search-6c4d86fdb-ktvmm', address='172.16.13.196', datacenter='qa', taggedAddresses={lan=172.16.13.196, lan_ipv4=172.16.13.196, wan=172.16.13.196, wan_ipv4=172.16.13.196}, meta={consul-network-segment=}, createIndex=25655533, modifyIndex=25655535}, service=Service{id='mall-search-service-8108', service='mall-search-service', tags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], address='172.16.13.196', meta={}, port=8108, enableTagOverride=false, createIndex=25674075, modifyIndex=25674075}, checks=[Check{node='mall-search-6c4d86fdb-ktvmm', checkId='serfHealth', name='Serf Health Status', status=PASSING, notes='', output='Agent alive and reachable', serviceId='', serviceName='', serviceTags=[], createIndex=25655533, modifyIndex=25655533}, Check{node='mall-search-6c4d86fdb-ktvmm', checkId='service:mall-search-service-8108', name='Service 'mall-search-service' check', status=PASSING, notes='', output='', serviceId='mall-search-service-8108', serviceName='mall-search-service', serviceTags=[metrics=true, metrics-path=/actuator/prometheus, env-qa, secure=false, gRPC.port=9108], createIndex=25674075, modifyIndex=25674076}]}], consulIndex=25674184, consulKnownLeader=true, consulLastContact=0}],
6. 等待一段时间后（时间不固定） arthas上自动刷新mall-search信息，获取到两个节点信息，此时两个pod均有流量接入
暂时无法在飞书文档外展示此内容
总结：1. mall-search 和 common-server/mall-cms-service 的刷新机制不一样，可能是agent版本区别  没有更新的jar包了
         2. 在应用中等待2分钟后重新注册，解决问题









问题描述：
线上服务在mall-search-service在内存溢出重启完之后没有流量进入；
分析：
1、consul service 版本1.8.3，客户端版本consul-api：1.4.5
2、查询consul客户端服务，重启服务mall-search-service存在，并存活；
3、在mall-search-service 机器上查询服务：localhost:8500/v1/internal/ui/services?dc=c2&index=22443641，存在重启服务（方法用错了，代码里面使用的接口：
http://consul-cluster.qa.doublefs.com:8500/v1/health/service/mall-search-service?tag=env-qa&passing=true&token=）。
3、重启服务时，有时候流量可以进入，有时候不能进入，不能进入时，差不多30分钟以上的时候，流量才能进入；
解决过程：
1、在QA上复现问题，手写脚本，不停请求mall-rest服务接口（/mall-rest/api/v1/product-list/small），该接口会访问mall-search-service服务，这样可以判断流量是否进入；
2、查找consul获取服务列表的代码（org.springframework.cloud.consul.discovery.ConsulDiscoveryClient#getInstances(java.lang.String)）
/*
 * Copyright 2013-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.cloud.consul.discovery;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.ecwid.consul.v1.ConsulClient;
import com.ecwid.consul.v1.QueryParams;
import com.ecwid.consul.v1.Response;
import com.ecwid.consul.v1.catalog.CatalogServicesRequest;
import com.ecwid.consul.v1.health.HealthServicesRequest;
import com.ecwid.consul.v1.health.model.HealthService;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.cloud.client.DefaultServiceInstance;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;

import static org.springframework.cloud.consul.discovery.ConsulServerUtils.findHost;
import static org.springframework.cloud.consul.discovery.ConsulServerUtils.getMetadata;

/**
 * @author Spencer Gibb
 * @author Joe Athman
 * @author Tim Ysewyn
 * @author Chris Bono
 */
public class ConsulDiscoveryClient implements DiscoveryClient {

    private static final Log log = LogFactory.getLog(ConsulDiscoveryClient.class);

    private final ConsulClient client;

    private final ConsulDiscoveryProperties properties;

    public ConsulDiscoveryClient(ConsulClient client,
          ConsulDiscoveryProperties properties) {
       this.client = client;
       this.properties = properties;
    }

    @Override
    public String description() {
       return "Spring Cloud Consul Discovery Client";
    }

    @Override
    public List<ServiceInstance> getInstances(final String serviceId) {
       return getInstances(serviceId,
             new QueryParams(this.properties.getConsistencyMode()));
    }

    public List<ServiceInstance> getInstances(final String serviceId,
          final QueryParams queryParams) {
       List<ServiceInstance> instances = new ArrayList<>();

       addInstancesToList(instances, serviceId, queryParams);

       return instances;
    }

    private void addInstancesToList(List<ServiceInstance> instances, String serviceId,
          QueryParams queryParams) {
       HealthServicesRequest.Builder requestBuilder = HealthServicesRequest.newBuilder()
             .setPassing(this.properties.isQueryPassing()).setQueryParams(queryParams)
             .setToken(this.properties.getAclToken());
       String queryTag = this.properties.getQueryTagForService(serviceId);
       if (queryTag != null) {
          requestBuilder.setTag(queryTag);
       }
       HealthServicesRequest request = requestBuilder.build();
       Response<List<HealthService>> services = this.client.getHealthServices(serviceId,
             request);

       for (HealthService service : services.getValue()) {
          String host = findHost(service);

          Map<String, String> metadata = getMetadata(service,
                this.properties.isTagsAsMetadata());
          boolean secure = false;
          if (metadata.containsKey("secure")) {
             secure = Boolean.parseBoolean(metadata.get("secure"));
          }
          instances.add(new DefaultServiceInstance(service.getService().getId(),
                serviceId, host, service.getService().getPort(), secure, metadata));
       }
    }

    public List<ServiceInstance> getAllInstances() {
       List<ServiceInstance> instances = new ArrayList<>();

       Response<Map<String, List<String>>> services = this.client
             .getCatalogServices(CatalogServicesRequest.newBuilder()
                   .setQueryParams(QueryParams.DEFAULT).build());
       for (String serviceId : services.getValue().keySet()) {
          addInstancesToList(instances, serviceId, QueryParams.DEFAULT);
       }
       return instances;
    }

    @Override
    public List<String> getServices() {
       String aclToken = this.properties.getAclToken();

       CatalogServicesRequest request = CatalogServicesRequest.newBuilder()
             .setQueryParams(QueryParams.DEFAULT)
             .setToken(this.properties.getAclToken()).build();
       return new ArrayList<>(
             this.client.getCatalogServices(request).getValue().keySet());
    }

    @Override
    public int getOrder() {
       return this.properties.getOrder();
    }

    /**
     * Depreacted local resolver.
     */
    @Deprecated
    public interface LocalResolver {

       String getInstanceId();

       Integer getPort();

    }

}
3、本地debug获取在代码执行过程中，获取实例的调用链
ConsulCatalogWatch#catalogServicesWatch->DiscoveryClientResolverFactory#heartbeat->DiscoveryClientNameResolver#refreshFromExternal->DiscoveryClientNameResolver.Resolve#resolveInternal
4、分析代码
4.1、ConsulCatalogWatch#catalogServicesWatch创建一个每3s钟的定时任务，获取consul服务的consulIndex值（这里得点赞下consul的设计者，为了降低请求数，设计了consulIndex）。同时发送心跳事件（这里为了降低耦合，使用spring的事件通知机制）
try {
    long index = -1;
    if (this.catalogServicesIndex.get() != null) {
       index = this.catalogServicesIndex.get().longValue();
    }

    CatalogServicesRequest request = CatalogServicesRequest.newBuilder()
          .setQueryParams(new QueryParams(
                this.properties.getCatalogServicesWatchTimeout(), index))
          .setToken(this.properties.getAclToken()).build();
    Response<Map<String, List<String>>> response = this.consul
          .getCatalogServices(request);
    Long consulIndex = response.getConsulIndex();
    if (consulIndex != null) {
       this.catalogServicesIndex.set(BigInteger.valueOf(consulIndex));
    }

    if (log.isTraceEnabled()) {
       log.trace("Received services update from consul: " + response.getValue()
             + ", index: " + consulIndex);
    }
    this.publisher.publishEvent(new HeartbeatEvent(this, consulIndex));
}
catch (Exception e) {
    log.error("Error watching Consul CatalogServices", e);
}
4.2、事件监听DiscoveryClientResolverFactory#heartbeat，先比较新值和老值是否有变化，如果没有变化，不进行更新操作，请记住这里。
@EventListener(HeartbeatEvent.class)
public void heartbeat(final HeartbeatEvent event) {
    if (this.monitor.update(event.getValue())) {
        for (final DiscoveryClientNameResolver discoveryClientNameResolver : this.discoveryClientNameResolvers) {
            discoveryClientNameResolver.refreshFromExternal();
        }
    }
}
4.3、DiscoveryClientNameResolver#refreshFromExternal
public void refreshFromExternal() {
    this.syncContext.execute(() -> {
        if (this.listener != null) {
            resolve();
        }
    });
}

private void resolve() {
    log.debug("Scheduled resolve for {}", this.name);
    if (this.resolving) {
        return;
    }
    this.resolving = true;
    this.executor.execute(new Resolve(this.listener, this.instanceList));
}
4.4、DiscoveryClientNameResolver.Resolve#resolveInternal获取service对应的Instance，并判断是否进行更新
private List<ServiceInstance> resolveInternal() {
    final String name = DiscoveryClientNameResolver.this.name;
    final List<ServiceInstance> newInstanceList =
            DiscoveryClientNameResolver.this.client.getInstances(name);
    log.debug("Got {} candidate servers for {}", newInstanceList.size(), name);
    if (CollectionUtils.isEmpty(newInstanceList)) {
        log.error("No servers found for {}", name);
        this.savedListener.onError(Status.UNAVAILABLE.withDescription("No servers found for " + name));
        return Lists.newArrayList();
    }
    if (!needsToUpdateConnections(newInstanceList)) {
        log.debug("Nothing has changed... skipping update for {}", name);
        return KEEP_PREVIOUS;
    }
    log.debug("Ready to update server list for {}", name);
    final List<EquivalentAddressGroup> targets = Lists.newArrayList();
    for (final ServiceInstance instance : newInstanceList) {
        final int port = getGRPCPort(instance);
        log.debug("Found gRPC server {}:{} for {}", instance.getHost(), port, name);
        targets.add(new EquivalentAddressGroup(
                new InetSocketAddress(instance.getHost(), port), Attributes.EMPTY));
    }
    if (targets.isEmpty()) {
        log.error("None of the servers for {} specified a gRPC port", name);
        this.savedListener.onError(Status.UNAVAILABLE
                .withDescription("None of the servers for " + name + " specified a gRPC port"));
        return Lists.newArrayList();
    } else {
        this.savedListener.onResult(ResolutionResult.newBuilder()
                .setAddresses(targets)
                .build());
        log.info("Done updating server list for {}", name);
        return newInstanceList;
    }
}
5、分析完代码，接下来用arthas watch命令在线上监控请求的入参，出参，当前对象的值。梳理出来四个核心接口
  org.springframework.cloud.consul.discovery.ConsulCatalogWatch#catalogServicesWatch
  net.devh.boot.grpc.client.nameresolver.DiscoveryClientResolverFactory heartbeat
  net.devh.boot.grpc.client.nameresolver.DiscoveryClientNameResolver refreshFromExternal
  com.ecwid.consul.v1.health.HealthConsulClient getHealthServices
  监控信息如下。
  服务关闭时间：30:42 ；启动时间 ： 32.04
  net.devh.boot.grpc.client.nameresolver.DiscoveryClientResolverFactory heartbeat 
暂时无法在飞书文档外展示此内容
  net.devh.boot.grpc.client.nameresolver.DiscoveryClientNameResolver refreshFromExternal
暂时无法在飞书文档外展示此内容
  监控的初步结论：heartbeat心跳3ms一次，refreshFromExternal 在服务上下线时，有调用。
  6、为了方便测试，改到QA上进行测试，为了方便处理，把QA的日志级别设置为debug。
[图片]
      通过debug日志分析得出结论：
1、服务下线时，获取健康实例数是正确的，但是服务上线时，获取健康实例数不一致；
2、由于服务上线之后，服务是通过consulIndex判断是否获取健康实例数，因此，上线第一次没有获取到正确的实例数，之后就不会再获取健康实例数了，这样导致mall-rest没办法获取新上线的健康实例，流量转发不到mall-search-service上；
解决方案：
1、解决为啥服务上线之后，为啥获取健康是实例数不正确，初步怀疑是consul service端的问题，服务上线之后，没有通过健康检查，但是consulIndex已经变更了，解决思路：修改consul service 端代码，根据健康实例，实现consulIndex值；
2、服务注册之后，让consulIndex变更，让mall-rest重新获取健康实例数。
目前采用方案2，在服务注册成功之后20s之后，通过修改服务的tag，让consulIndex值发生变化，实现mall-rest重新获取健康实例。

